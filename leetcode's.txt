leetcode's

2.normal try
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)-1):
            for j in range (i+1,len(nums)):
                if nums[i]+nums[j]==target:
                    return([i,j])

optimized try -->
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        nums_dict = {}
        for i in range(len(nums)):
            complement = target - nums[i]
            if complement in nums_dict:
                return [nums_dict[complement],i]
            else:
                nums_dict[nums[i]] = i
        return []

9.
class Solution:
    def isPalindrome(self, x: int) -> bool:
        x=str(x)
        if x==x[::-1]:
            return 1
        return 0

13 Roman to integer

class Solution:
    def romanToInt(self, s: str) -> int:
        result = 0
        aDict = {"M":1000, "D":500, "C":100, "L":50, "X":10, "V":5, "I":1, "IV": -2, "IX": -2, "XL": -20, "XC": -20, "CD": -200,"CM": -200}
        for k, v in aDict.items(): 
            if k in s:
                result += v*s.count(k)
        return result

14.longest prefix:

class Solution:
    def longestCommonPrefix(self, v: List[str]) -> str:
        ans=""
        v=sorted(v)
        first=v[0]
        last=v[-1]
        for i in range(min(len(first),len(last))):
            if(first[i]!=last[i]):
                return ans
            ans+=first[i]
        return ans 

20: vallid parentheses:

class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        for c in s: 
            if c in '([{': 
                stack.append(c)
            else:
                if not stack or \
                    (c == ')' and stack[-1] != '(') or \
                    (c == '}' and stack[-1] != '{') or \
                    (c == ']' and stack[-1] != '['):
                    return False
                stack.pop()
        return not stack 


21.Merge two sorted lists:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        
        cur = temp = ListNode()
        while list1 and list2:               
            if list1.val < list2.val:
                cur.next = list1
                list1, cur = list1.next, list1
            else:
                cur.next = list2
                list2, cur = list2.next, list2
                
        if list1 or list2:
            cur.next = list1 if list1 else list2
            
        return temp.next


    

26.remove duplicates from sorted array
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        j = 1
        for i in range(1, len(nums)):
            if nums[i] != nums[i - 1]:
                nums[j] = nums[i]
                j += 1
        return j.



27.remove element
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        nums[:] = [x for x in nums if x != val]
        print(nums)

28.. Find the Index of the First Occurrence in a String
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        return (haystack.find(needle))

58. length of words

class Solution:
    def lengthOfLastWord(self, s: str) -> int:
        li=s.split(' ')
        out=[]
        for i in li:
            if i.isalpha():
                out.append(i)
        p=out.pop()
        return(len(p))
     

66.plus one
class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        out=''
        total=[]
        for i in digits:
            out+=str(i)
        sum1=1+int(out)
        for i in str(sum1):
            total.append(int(i))
        return total



